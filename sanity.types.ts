// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export interface Career {
  _id: string;
  _type: "career";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden: boolean;
  type:
    | "Contract"
    | "Self-Employed"
    | "Part-time"
    | "Full-time"
    | "Internship"
    | "Apprenticeship"
    | "Freelance";
  title: string;
  description: (
    | {
        children?: {
          marks?: string[];
          text?: string;
          _type: "span";
          _key: string;
        }[];
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "muted"
          | "blockquote"
          | "blockquote-info"
          | "blockquote-success"
          | "blockquote-warning"
          | "blockquote-danger";
        listItem?: "bullet" | "number";
        markDefs?: (
          | {
              href?: string;
              _type: "link";
              _key: string;
            }
          | {
              ref:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "post";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "project";
                  };
              _type: "referencelink";
              _key: string;
            }
        )[];
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  )[];
  tags: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }[];
  location: {
    type: "On-site" | "Hybrid" | "Remote";
    address: string;
  };
  company: {
    name: string;
    url: string;
    logo: {
      asset: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
  date: {
    start: string;
    end?: string;
  };
  links: ({
    _key: string;
  } & EnhancedURL)[];
}

export interface EnhancedURL {
  _type: "enhancedURL";
  display: string;
  url: string;
  hidden: boolean;
}

export type BlockContent = (
  | {
      children?: {
        marks?: string[];
        text?: string;
        _type: "span";
        _key: string;
      }[];
      style?:
        | "normal"
        | "h1"
        | "h2"
        | "h3"
        | "h4"
        | "h5"
        | "h6"
        | "muted"
        | "blockquote"
        | "blockquote-info"
        | "blockquote-success"
        | "blockquote-warning"
        | "blockquote-danger";
      listItem?: "bullet" | "number";
      markDefs?: (
        | {
            href?: string;
            _type: "link";
            _key: string;
          }
        | {
            ref:
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "post";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "project";
                };
            _type: "referencelink";
            _key: string;
          }
      )[];
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
      _key: string;
    }
  | ({
      _key: string;
    } & Code)
)[];

export interface Category {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
}

export interface PersonalInfo {
  _id: string;
  _type: "personalInfo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  title: string;
  tagline: string;
  shortBio: string;
  birthday: string;
  jobStatus?: {
    show: boolean;
    status: "open" | "inbetween" | "close";
  };
  CV?: {
    file?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    lastupdatedAt?: string;
  };
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  bio: BlockContent;
  socialLinks?: string[];
  skillTags?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }[];
  selectedPosts?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }[];
  selectedProjects?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }[];
  uses: BlockContent;
}

export interface Post {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden: boolean;
  archived: boolean;
  title: string;
  slug: Slug;
  postedAt: string;
  tags?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }[];
  description: string;
  images: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }[];
  body: BlockContent;
}

export interface Project {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden: boolean;
  archived: boolean;
  slug: Slug;
  title: string;
  status: "completed" | "ongoing" | "abandoned";
  role: string;
  images: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }[];
  tags: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }[];
  body: BlockContent;
  links: ({
    _key: string;
  } & EnhancedURL)[];
}

export interface Configuration {
  _id: string;
  _type: "configuration";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  showOriginalSourceLink: boolean;
  showSimpleCodePreview: boolean;
}

export interface Code {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: number[];
}

export interface SanityImagePaletteSwatch {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
}

export interface SanityImagePalette {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
}

export interface SanityImageDimensions {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
}

export interface SanityImageHotspot {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
}

export interface SanityImageCrop {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
}

export interface SanityFileAsset {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
}

export interface SanityImageAsset {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
}

export interface SanityImageMetadata {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
}

export interface Geopoint {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
}

export interface Slug {
  _type: "slug";
  current: string;
  source?: string;
}

export interface SanityAssetSourceData {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
}

export type AllSanitySchemaTypes =
  | Career
  | EnhancedURL
  | BlockContent
  | Category
  | PersonalInfo
  | Post
  | Project
  | Configuration
  | Code
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity/queries.ts
// Variable: PAGINATED_POSTS_QUERY
// Query: {        "data":     *[_type == "post" && defined(slug.current) && hidden != true && archived != true] | order(postedAt desc) {        _id,        title,        slug,        postedAt,         "image": images[0],        "wordCount": length(pt::text(body))    },    }
export interface PAGINATED_POSTS_QUERYResult {
  data: {
    _id: string;
    title: string;
    slug: Slug;
    postedAt: string;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
      _key: string;
    } | null;
    wordCount: number;
  }[];
}
// Variable: POST_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug.current) && hidden != true] {        "slug": slug.current    }
export type POST_SLUGS_QUERYResult = {
  slug: string;
}[];
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug && hidden != true][0] {        ...,        "wordCount": length(pt::text(body)),        "derefTag": coalesce(tags[]->, []),    }
export type POST_QUERYResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden: boolean;
  archived: boolean;
  title: string;
  slug: Slug;
  postedAt: string;
  tags?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }[];
  description: string;
  images: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }[];
  body: BlockContent;
  wordCount: number;
  derefTag:
    | {
        _id: string;
        _type: "category";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title: string;
        slug: Slug;
      }[]
    | never[];
} | null;
// Variable: CV_REF_QUERY
// Query: *[_type == "personalInfo" && _id == "personalInfo"] [0].CV.file.asset->
export type CV_REF_QUERYResult = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
} | null;
// Variable: HOME_PAGE_QUERY
// Query: *[_type == "personalInfo" && _id == "personalInfo"] [0] {        name,        title,        tagline,        shortBio,        "selectedPosts": coalesce(            selectedPosts[]-> {                title,                description,                "slug": slug.current            },        []),        "selectedProjects": coalesce(            selectedProjects[]-> {                "slug": slug.current,                title,                "tags": tags[]-> {                    "slug": slug.current,                    "name": title,                },            },        []),    }
export type HOME_PAGE_QUERYResult = {
  name: string;
  title: string;
  tagline: string;
  shortBio: string;
  selectedPosts:
    | {
        title: string;
        description: string;
        slug: string;
      }[]
    | never[];
  selectedProjects:
    | {
        slug: string;
        title: string;
        tags: {
          slug: string;
          name: string;
        }[];
      }[]
    | never[];
} | null;
// Variable: PAGINATED_PROJECTS_QUERY
// Query: {        "data":     *[_type == "project" && defined(slug.current) && hidden != true && archived != true] | order(_createdAt desc) {        _id,        _createdAt,        title,        slug,        role,        "image": images[0]    },    }
export interface PAGINATED_PROJECTS_QUERYResult {
  data: {
    _id: string;
    _createdAt: string;
    title: string;
    slug: Slug;
    role: string;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
      _key: string;
    } | null;
  }[];
}
// Variable: PROJECT_SLUGS_QUERY
// Query: *[_type == "project" && defined(slug.current) && hidden != true] {        "slug": slug.current    }
export type PROJECT_SLUGS_QUERYResult = {
  slug: string;
}[];
// Variable: PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug && hidden != true][0] {        ...,        "visibleLinks": links[@.hidden != true],        "derefTag": coalesce(tags[]->, []),    }
export type PROJECT_QUERYResult = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden: boolean;
  archived: boolean;
  slug: Slug;
  title: string;
  status: "abandoned" | "completed" | "ongoing";
  role: string;
  images: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }[];
  tags: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }[];
  body: BlockContent;
  links: ({
    _key: string;
  } & EnhancedURL)[];
  visibleLinks: ({
    _key: string;
  } & EnhancedURL)[];
  derefTag: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    slug: Slug;
  }[];
} | null;
// Variable: CAREERS_QUERY
// Query: {        "careers":  *[_type == "career" && hidden != true] {            ...,            "visibleLinks": coalesce(links[@.hidden != true], []),            "derefTag": coalesce(tags[]->, []),        },        "cvUpdatedAt": *[_type == "personalInfo" && _id == "personalInfo"][0].CV.file.asset->_updatedAt    }
export interface CAREERS_QUERYResult {
  careers: {
    _id: string;
    _type: "career";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    hidden: boolean;
    type:
      | "Apprenticeship"
      | "Contract"
      | "Freelance"
      | "Full-time"
      | "Internship"
      | "Part-time"
      | "Self-Employed";
    title: string;
    description: (
      | ({
          _key: string;
        } & Code)
      | {
          children?: {
            marks?: string[];
            text?: string;
            _type: "span";
            _key: string;
          }[];
          style?:
            | "blockquote-danger"
            | "blockquote-info"
            | "blockquote-success"
            | "blockquote-warning"
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "muted"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs?: (
            | {
                href?: string;
                _type: "link";
                _key: string;
              }
            | {
                ref:
                  | {
                      _ref: string;
                      _type: "reference";
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: "post";
                    }
                  | {
                      _ref: string;
                      _type: "reference";
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: "project";
                    };
                _type: "referencelink";
                _key: string;
              }
          )[];
          level?: number;
          _type: "block";
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt: string;
          _type: "image";
          _key: string;
        }
    )[];
    tags: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "category";
    }[];
    location: {
      type: "Hybrid" | "On-site" | "Remote";
      address: string;
    };
    company: {
      name: string;
      url: string;
      logo: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
    };
    date: {
      start: string;
      end?: string;
    };
    links: ({
      _key: string;
    } & EnhancedURL)[];
    visibleLinks: ({
      _key: string;
    } & EnhancedURL)[];
    derefTag: {
      _id: string;
      _type: "category";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      slug: Slug;
    }[];
  }[];
  cvUpdatedAt: string | null;
}
// Variable: PROFILE_IMAGE_QUERY
// Query: *[_type == "personalInfo" && _id == "personalInfo"] [0].image.asset->
export type PROFILE_IMAGE_QUERYResult = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
} | null;
// Variable: SEARCH_QUERY
// Query: *[_type in $type && ( title match $title || body[].children[].text match $title || description match $title || tags[]->slug.current match $title ) && hidden != true] {        _type,        title,        slug,        "tags": coalesce(tags[]->, []),    }
export type SEARCH_QUERYResult = (
  | {
      _type: "career";
      title: string;
      slug: null;
      tags: {
        _id: string;
        _type: "category";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title: string;
        slug: Slug;
      }[];
    }
  | {
      _type: "category";
      title: string;
      slug: Slug;
      tags: never[];
    }
  | {
      _type: "configuration";
      title: null;
      slug: null;
      tags: never[];
    }
  | {
      _type: "personalInfo";
      title: string;
      slug: null;
      tags: never[];
    }
  | {
      _type: "post";
      title: string;
      slug: Slug;
      tags:
        | {
            _id: string;
            _type: "category";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            title: string;
            slug: Slug;
          }[]
        | never[];
    }
  | {
      _type: "project";
      title: string;
      slug: Slug;
      tags: {
        _id: string;
        _type: "category";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title: string;
        slug: Slug;
      }[];
    }
  | {
      _type: "sanity.fileAsset";
      title: string | null;
      slug: null;
      tags: never[];
    }
  | {
      _type: "sanity.imageAsset";
      title: string | null;
      slug: null;
      tags: never[];
    }
)[];
// Variable: USES_QUERY
// Query: *[_type == "personalInfo" && _id == "personalInfo"] [0].uses
export type USES_QUERYResult = BlockContent | null;
// Variable: RSS_FEED_QUERY
// Query: {        "title": coalesce(*[_type == "configuration" && _id == "configuration"] [0].name, ''),        "description": coalesce(*[_type == "personalInfo" && _id == "personalInfo"] [0].shortBio, ""),        "items": coalesce(*[_type == "post" && defined(slug.current) && hidden != true] | order(postedAt desc) {                    title,                    "pubDate": postedAt,                    description,                    "link": '/blog/' + slug.current,                    "categories": coalesce(tags[]->slug.current, []),                }, []),    }
export interface RSS_FEED_QUERYResult {
  title: string | "";
  description: string | "";
  items: {
    title: string;
    pubDate: string;
    description: string;
    link: string;
    categories: string[] | never[];
  }[];
}
// Variable: SOCIAL_LINKS_QUERY
// Query: coalesce(*[_type == "personalInfo" && _id == "personalInfo"] [0].socialLinks, [])
export type SOCIAL_LINKS_QUERYResult = string[] | never[];
// Variable: ABOUT_QUERY
// Query: *[_type == "personalInfo" && _id == "personalInfo"] [0] {        bio,    }
export type ABOUT_QUERYResult = {
  bio: BlockContent;
} | null;
// Variable: BIRTHDAY_QUERY
// Query: *[_type == "personalInfo" && _id == "personalInfo"] [0].birthday
export type BIRTHDAY_QUERYResult = string | null;
// Variable: SHOW_SIMPLE_CODE_QUERY
// Query: coalesce(*[_type == "configuration" && _id == "configuration"] [0].showSimpleCodePreview, false)
export type SHOW_SIMPLE_CODE_QUERYResult = boolean | false;
// Variable: LINK_REFERENCE_QUERY
// Query: $ref -> {        "type": _type,        "name": title,        "updatedAt": _updatedAt,        "slug": slug.current,        "shouldShow": array::intersects(["post", "project"], [_type]) && hidden == true    }
export type LINK_REFERENCE_QUERYResult = null;
// Variable: TAGS_QUERY
// Query: *[_type == "category" && hidden != true] {        "slug": slug.current,        "name": title,    }
export type TAGS_QUERYResult = {
  slug: string;
  name: string;
}[];

declare module "@sanity/client" {
  interface SanityQueries {
    '\n    {\n        "data": \n    *[_type == "post" && defined(slug.current) && hidden != true && archived != true] | order(postedAt desc) {\n        _id,\n        title,\n        slug,\n        postedAt, \n        "image": images[0],\n        "wordCount": length(pt::text(body))\n    }\n,\n    }\n': PAGINATED_POSTS_QUERYResult;
    '\n    *[_type == "post" && defined(slug.current) && hidden != true] {\n        "slug": slug.current\n    }\n': POST_SLUGS_QUERYResult;
    '\n    *[_type == "post" && slug.current == $slug && hidden != true][0] {\n        ...,\n        "wordCount": length(pt::text(body)),\n        "derefTag": coalesce(tags[]->, []),\n    }\n': POST_QUERYResult;
    '\n    *[_type == "personalInfo" && _id == "personalInfo"] [0].CV.file.asset->\n': CV_REF_QUERYResult;
    '\n    *[_type == "personalInfo" && _id == "personalInfo"] [0] {\n        name,\n        title,\n        tagline,\n        shortBio,\n        "selectedPosts": coalesce(\n            selectedPosts[]-> {\n                title,\n                description,\n                "slug": slug.current\n            },\n        []),\n        "selectedProjects": coalesce(\n            selectedProjects[]-> {\n                "slug": slug.current,\n                title,\n                "tags": tags[]-> {\n                    "slug": slug.current,\n                    "name": title,\n                },\n            },\n        []),\n    }\n': HOME_PAGE_QUERYResult;
    '\n    {\n        "data": \n    *[_type == "project" && defined(slug.current) && hidden != true && archived != true] | order(_createdAt desc) {\n        _id,\n        _createdAt,\n        title,\n        slug,\n        role,\n        "image": images[0]\n    }\n,\n    }\n': PAGINATED_PROJECTS_QUERYResult;
    '\n    *[_type == "project" && defined(slug.current) && hidden != true] {\n        "slug": slug.current\n    }\n': PROJECT_SLUGS_QUERYResult;
    '\n    *[_type == "project" && slug.current == $slug && hidden != true][0] {\n        ...,\n        "visibleLinks": links[@.hidden != true],\n        "derefTag": coalesce(tags[]->, []),\n    }\n': PROJECT_QUERYResult;
    '\n    {\n        "careers":  *[_type == "career" && hidden != true] {\n            ...,\n            "visibleLinks": coalesce(links[@.hidden != true], []),\n            "derefTag": coalesce(tags[]->, []),\n        },\n        "cvUpdatedAt": *[_type == "personalInfo" && _id == "personalInfo"][0].CV.file.asset->_updatedAt\n    }\n': CAREERS_QUERYResult;
    '\n    *[_type == "personalInfo" && _id == "personalInfo"] [0].image.asset->\n': PROFILE_IMAGE_QUERYResult;
    '\n    *[_type in $type && ( title match $title || body[].children[].text match $title || description match $title || tags[]->slug.current match $title ) && hidden != true] {\n        _type,\n        title,\n        slug,\n        "tags": coalesce(tags[]->, []),\n    }\n': SEARCH_QUERYResult;
    '\n    *[_type == "personalInfo" && _id == "personalInfo"] [0].uses\n': USES_QUERYResult;
    '\n    {\n        "title": coalesce(*[_type == "configuration" && _id == "configuration"] [0].name, \'\'),\n        "description": coalesce(*[_type == "personalInfo" && _id == "personalInfo"] [0].shortBio, ""),\n        "items": coalesce(*[_type == "post" && defined(slug.current) && hidden != true] | order(postedAt desc) {\n                    title,\n                    "pubDate": postedAt,\n                    description,\n                    "link": \'/blog/\' + slug.current,\n                    "categories": coalesce(tags[]->slug.current, []),\n                }, []),\n    }\n': RSS_FEED_QUERYResult;
    '\n    coalesce(*[_type == "personalInfo" && _id == "personalInfo"] [0].socialLinks, [])\n': SOCIAL_LINKS_QUERYResult;
    '\n    *[_type == "personalInfo" && _id == "personalInfo"] [0] {\n        bio,\n    }\n': ABOUT_QUERYResult;
    '\n    *[_type == "personalInfo" && _id == "personalInfo"] [0].birthday\n': BIRTHDAY_QUERYResult;
    '\n    coalesce(*[_type == "configuration" && _id == "configuration"] [0].showSimpleCodePreview, false)\n': SHOW_SIMPLE_CODE_QUERYResult;
    '\n    $ref -> {\n        "type": _type,\n        "name": title,\n        "updatedAt": _updatedAt,\n        "slug": slug.current,\n        "shouldShow": array::intersects(["post", "project"], [_type]) && hidden == true\n    }\n': LINK_REFERENCE_QUERYResult;
    '\n    *[_type == "category" && hidden != true] {\n        "slug": slug.current,\n        "name": title,\n    }\n': TAGS_QUERYResult;
  }
}
