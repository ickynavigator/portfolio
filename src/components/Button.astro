---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

import Loader from "~/components/Loader.astro";
import { cn } from "~/lib/utils";

const buttonVariants = cva(
  "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border-input bg-background hover:bg-accent hover:text-accent-foreground border",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "size-10",
      },
      animate: {
        default: "",
        "slide-y":
          "data-[active='false']:[&_svg[slot='active']]:translate-y-(--move-length)! data-[active='true']:[&_svg[slot='inactive']]:-translate-y-(--move-length)!",
        "slide-x":
          "data-[active='false']:[&_svg[slot='active']]:translate-x-(--move-length)! data-[active='true']:[&_svg[slot='inactive']]:-translate-x-(--move-length)!",
      },
    },
    compoundVariants: [
      {
        animate: ["slide-x", "slide-y"],
        class:
          "relative overflow-clip transition-transform [--move-direction:1] [--move-length:calc(var(--move-direction)*200%)] [&_svg[slot]]:absolute [&_svg[slot]]:top-[50%] [&_svg[slot]]:left-[50%] [&_svg[slot]]:translate-[-50%] [&_svg[slot]]:transition-transform [&_svg[slot]]:duration-700",
      },
    ],
    defaultVariants: {
      variant: "default",
      size: "default",
      animate: "default",
    },
  },
);

const loaderVariants = cva("text-primary", {
  variants: {
    size: {
      default: "",
      sm: "",
      lg: "",
      icon: "",
    },
  },
});

interface Props
  extends HTMLAttributes<"button">,
    VariantProps<typeof buttonVariants> {
  loading?: boolean;
}

const {
  variant,
  size,
  animate,
  class: _class,
  loading,
  ...props
} = Astro.props;
---

<button
  {...props}
  class={cn(buttonVariants({ variant, size, animate, class: _class }))}
>
  {loading && <Loader wrapperClass="p-0" class={loaderVariants({ size })} />}
  <slot />
  <slot name="inactive" />
  <slot name="active" />
</button>
