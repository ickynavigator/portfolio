---
import {
  transformerNotationDiff,
  transformerNotationErrorLevel,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerRemoveNotationEscape,
} from "@shikijs/transformers";
import { IconCaretUpDownFilled, IconMinus, IconX } from "@tabler/icons-react";
import { Code as CustomCode } from "astro:components";

import { cn } from "~/lib/utils";

interface Props {
  code: string;
  language?: string;
  inline: boolean;
  title?: string | undefined;
  showLineNumbers?: boolean;
}

const { code, inline, title, showLineNumbers = false } = Astro.props;

const language = "ts";

const fileButtons = [
  {
    icon: IconX,
    class:
      "bg-[#FF5F57] dark:[#FF5F57] hover:bg-[#E0483E] dark:hover:bg-[#E0483E]",
  },
  {
    icon: IconMinus,
    class:
      "bg-[#FFBD2E] dark:[#FFBD2E] hover:bg-[#E0A123] dark:hover:bg-[#E0A123]",
  },
  {
    icon: IconCaretUpDownFilled,
    class:
      "bg-[#28C940] dark:[#28C940] hover:bg-[#22A532] dark:hover:bg-[#22A532] -rotate-45",
  },
];
---

<div class="rounded-md border-2 overflow-clip my-2 border-x-0">
  <div
    class="bg-[#F0F0F5] dark:bg-[#2E2E2E] text-[#2E2E2E] dark:text-[#E0E0E0] drop-shadow-md py-1 px-2 flex justify-between text-sm border-b-2 select-none"
  >
    <div class="flex gap-2 items-center">
      {
        fileButtons.map((button) => (
          <button.icon
            className={cn(
              "rounded-full w-3 h-3 text-transparent hover:text-white hover:dark:text-black p-[0.0625rem] transition-colors",
              button.class,
            )}
          />
        ))
      }
    </div>

    <span class="font-semibold">{title ?? "Random Code"}</span>

    <span>
      {language}
    </span>
  </div>

  <CustomCode
    code={code}
    inline={inline}
    lang={language}
    data-show-line-numbers={showLineNumbers.toString()}
    style="--linecount: 2"
    tabindex={null}
    theme="dracula"
    transformers={[
      transformerNotationDiff(),
      transformerNotationHighlight(),
      transformerNotationWordHighlight(),
      transformerNotationFocus(),
      transformerNotationErrorLevel(),
      transformerRemoveNotationEscape(),
    ]}
  />
</div>

<style>
  :root {
    --color-line-add: var(--success);
    --color-line-remove: var(--destructive);
    --color-line-highlight: var(--info);
    --color-line-warning: var(--warning-foreground);
    --color-line-error: var(--destructive);

    --alpha-offset: 0.2;

    --bg-color: initial;
  }

  pre {
    code {
      font-family: "Input Mono", "IBM Plex Mono", monospace;

      @apply block w-fit min-w-full py-1 text-base leading-tight;

      .line {
        @apply inline-block min-h-5 w-full border-l-4 border-transparent bg-[hsl(var(--bg-color)/var(--alpha-offset))] px-[0.375rem] align-top;

        &.diff {
          &.add {
            --bg-color: var(--color-line-add);
          }

          &.remove {
            --bg-color: var(--color-line-remove);
          }
        }

        &.highlighted {
          --bg-color: var(--color-line-highlight);

          &.warning {
            --bg-color: var(--color-line-warning);
          }

          &.error {
            --bg-color: var(--color-line-error);
          }
        }

        .highlighted-word {
          @apply rounded border bg-[hsl(var(--color-line-highlight)/var(--alpha-offset))] px-1 py-[0.0625rem];
        }
      }
    }

    &.has-focused {
      .line {
        @apply blur-none transition duration-300;
      }

      &:not(:hover) {
        .line {
          @apply blur-[0.095rem];

          &.focused {
            @apply blur-none;
          }
        }
      }
    }

    &[data-show-line-numbers="true"] {
      --spacing: calc(((var(--linecount) + 1) * 1rem));
      --left-position: calc(var(--spacing) + 4px);

      @apply pl-[var(--spacing)];

      code {
        @apply border-0 border-l-[1px] border-solid border-primary-foreground;

        counter-reset: step;
        counter-increment: step 0;

        .line {
          @apply relative;

          &::before {
            @apply absolute -left-[var(--left-position)] w-[var(--spacing)] bg-[hsl(var(--bg-color)/var(--alpha-offset))] pr-[.4rem] text-right text-sm blur-none content-[counter(step)];

            counter-increment: step;
          }
        }
      }
    }

    &[data-show-line-numbers="true"] {
      code {
        .line {
          &.highlighted {
            &::before {
              @apply border-l-4 border-[hsl(var(--bg-color))];
            }
          }
        }
      }
    }
    &[data-show-line-numbers="false"],
    &[data-show-line-numbers=""] {
      code {
        .line {
          &.highlighted {
            @apply border-[hsl(var(--bg-color))];
          }
        }
      }
    }
  }
</style>
