---
import {
  transformerNotationDiff,
  transformerNotationErrorLevel,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerRemoveNotationEscape,
} from "@shikijs/transformers";
import {
  IconCaretUpDownFilled,
  IconCopy,
  IconFileCode,
  IconFileTypeJs,
  IconFileTypeJsx,
  IconFileTypeTs,
  IconFileTypeTsx,
  IconMinus,
  IconNumbers,
  IconX,
} from "@tabler/icons-react";
import { Code as CustomCode } from "astro:components";

import IconCheckbox from "~/components/IconCheckbox.astro";
import { cn } from "~/lib/utils";

interface Props {
  code: string;
  language?: string | undefined;
  inline: boolean;
  title?: string | undefined;
  showLineNumbers?: boolean;
}

const { code, inline, title, showLineNumbers = false } = Astro.props;

const language = "ts";

const fileButtons = [
  {
    title: "Close",
    icon: IconX,
    class:
      "bg-[#FF5F57] dark:[#FF5F57] hover:bg-[#E0483E] dark:hover:bg-[#E0483E]",
  },
  {
    title: "Minimize",
    icon: IconMinus,
    class:
      "bg-[#FFBD2E] dark:[#FFBD2E] hover:bg-[#E0A123] dark:hover:bg-[#E0A123]",
  },
  {
    title: "Expand",
    icon: IconCaretUpDownFilled,
    class:
      "bg-[#28C940] dark:[#28C940] hover:bg-[#22A532] dark:hover:bg-[#22A532] [&_svg]:-rotate-45",
  },
];

const magicCodeIcon = (_language: string) => {
  switch (_language) {
    case "js": {
      return IconFileTypeJs;
    }
    case "jsx": {
      return IconFileTypeJsx;
    }
    case "ts":
    case "typescript": {
      return IconFileTypeTs;
    }
    case "tsx": {
      return IconFileTypeTsx;
    }
    default: {
      return IconFileCode;
    }
  }
};

const CodeIcon = magicCodeIcon(language);
---

<custom-code-block
  class="my-2 block overflow-clip rounded-t-md border shadow-md"
  data-show-line-numbers={showLineNumbers}
  data-code={code}
>
  <div
    class="bg-secondary text-secondary-foreground flex justify-between border-b-2 px-2 py-1 text-sm drop-shadow-md select-none"
  >
    <div class="group/icons flex items-center gap-2">
      {
        fileButtons.map((button) => (
          <button
            title={button.title}
            class={cn(
              "group-hover/icons:text-primary-foreground flex size-3 items-center justify-center overflow-clip rounded-full p-[0.0625rem] text-transparent transition-colors",
              button.class,
            )}
          >
            <span class="sr-only">{button.title}</span>
            <button.icon className="relative-icon" />
          </button>
        ))
      }
    </div>

    <span class="font-semibold">{title ?? "Random Code"}</span>

    <div class="flex items-center gap-2">
      <IconCheckbox
        label="Show line numbers"
        name="show-numbers"
        title="Show line numbers"
      >
        <IconNumbers className="relative-icon" />
      </IconCheckbox>

      <button
        id="copy-code"
        class="border-primary bg-secondary hover:bg-primary/30 rounded-sm border p-0.5 transition"
        title="Copy Code"
      >
        <IconCopy className="relative-icon" />
      </button>

      <CodeIcon className="relative-icon" />
    </div>
  </div>

  <CustomCode
    code={code}
    inline={inline}
    lang={language}
    style="--linecount: 2"
    tabindex={null}
    themes={{ light: "catppuccin-latte", dark: "catppuccin-frappe" }}
    defaultColor="dark"
    transformers={[
      transformerNotationDiff(),
      transformerNotationHighlight(),
      transformerNotationWordHighlight(),
      transformerNotationFocus(),
      transformerNotationErrorLevel(),
      transformerRemoveNotationEscape(),
    ]}
  />
</custom-code-block>

<style>
  @reference "../styles/globals.css";

  pre {
    --color-line-add: var(--success);
    --color-line-remove: var(--destructive);
    --color-line-highlight: var(--info);
    --color-line-warning: var(--warning-foreground);
    --color-line-error: var(--destructive);

    --alpha-offset: 20%;

    --bg-color: initial;
    --spacing: calc(((var(--linecount) + 1) * 1rem));
    --left-position: calc(var(--spacing) + 0.375rem);

    @apply transition-all;

    code {
      @apply block w-fit min-w-full font-mono text-base leading-tight;

      .line {
        @apply relative inline-block w-full border-s-4 border-transparent bg-[--alpha(var(--bg-color)/var(--alpha-offset))] ps-[calc(var(--spacing)-1.5rem)] align-top;

        &::before,
        &::after {
          @apply text-muted-foreground;
        }

        &.diff {
          &.add {
            --bg-color: var(--color-line-add);
            --diff-content: "+";
          }

          &.remove {
            --bg-color: var(--color-line-remove);
            --diff-content: "-";
          }

          &::after {
            @apply absolute start-[calc(var(--spacing)-3rem)] w-(--spacing) content-(--diff-content);
          }
        }

        &.highlighted {
          --bg-color: var(--color-line-highlight);

          &.warning {
            --bg-color: var(--color-line-warning);
          }

          &.error {
            --bg-color: var(--color-line-error);
          }
        }

        .highlighted-word {
          @apply bg-[--alpha(var(--color-line-highlight)/var(--alpha-offset))];
        }
      }
    }

    &.has-focused {
      .line {
        @apply blur-none transition duration-300;
      }

      &:not(:hover) {
        .line {
          @apply blur-[0.095rem];

          &.focused {
            @apply blur-none;
          }
        }
      }
    }
  }

  custom-code-block {
    &[data-show-line-numbers="true"] pre {
      @apply ps-(--spacing);

      code {
        @apply border-primary-foreground/30 border-0 border-s-2 border-solid;

        counter-reset: step;
        counter-increment: step 0;

        .line {
          &::before {
            @apply absolute -start-(--left-position) w-(--spacing) border-s-4 border-transparent bg-[--alpha(var(--bg-color)/var(--alpha-offset))] pe-[.4rem] text-right text-sm blur-none content-[counter(step)];

            counter-increment: step;
          }
        }
      }
    }

    &[data-show-line-numbers="true"] pre {
      code .line.highlighted::before {
        @apply border-(--bg-color);
      }
    }

    &:not([data-show-line-numbers="true"]) pre {
      code .line.highlighted {
        @apply border-(--bg-color);
      }
    }
  }
</style>

<script>
  import { toast } from "sonner";

  class CustomCodeBlock extends HTMLElement {
    connectedCallback() {
      this.querySelector("[title='Close']")?.addEventListener("click", () => {
        this.querySelector("pre")?.classList.add("hidden");
      });

      this.querySelector("[title='Expand']")?.addEventListener("click", () => {
        this.querySelector("pre")?.classList.remove("hidden");
      });

      this.#bindCheck(
        this.querySelector("[name='show-numbers']"),
        "showLineNumbers",
      );

      this.querySelector("#copy-code")?.addEventListener("click", () => {
        try {
          navigator.clipboard.writeText(this.dataset.code ?? "");
          toast.success("Copied Succesfully.");
        } catch {
          toast.error("Failed to copy code. Please try again.");
        }
      });
    }

    #bindCheck(el: Element | HTMLElement | null, datasetKey: string) {
      if (el instanceof HTMLInputElement) {
        el.checked = booleanish(this.dataset[datasetKey]);

        el.addEventListener("click", (e) => {
          if (!(e.target instanceof HTMLInputElement)) return;
          this.dataset[datasetKey] = booleanish(e.target.checked).toString();
        });
      }
    }
  }

  const booleanish = (value: unknown) => {
    if (typeof value === "boolean") return value;
    if (typeof value === "string") return value.trim() === "true";
    return false;
  };

  customElements.define("custom-code-block", CustomCodeBlock);
</script>
