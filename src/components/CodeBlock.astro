---
import {
  transformerNotationDiff,
  transformerNotationErrorLevel,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerRemoveNotationEscape,
} from "@shikijs/transformers";
import { Code as CustomCode } from "astro:components";

interface Props {
  code: string;
  language?: string;
  inline: boolean;
  title?: string | undefined;

  highlightedLines?: string | undefined;
}

const { code, inline, title } = Astro.props;
const language = "ts";
const showLineNumbers = true;
---

<div class="rounded-md border-2 overflow-clip">
  <div class="bg-secondary py-1 px-2 flex justify-between text-sm">
    <span class="font-semibold">{title ?? "Random Code"}</span>

    <span>
      {language}
    </span>
  </div>

  <CustomCode
    code={code}
    inline={inline}
    lang={language}
    data-show-line-numbers={showLineNumbers.toString()}
    style="--linecount: 3"
    themes={{ light: "github-light", dark: "github-dark" }}
    transformers={[
      transformerNotationDiff(),
      transformerNotationHighlight(),
      transformerNotationWordHighlight(),
      transformerNotationFocus(),
      transformerNotationErrorLevel(),
      transformerRemoveNotationEscape(),
    ]}
  />
</div>

<style>
  :root {
    --color-line-add: #00550055;
    --color-line-remove: #88000055;
    --color-line-highlight: #f0f0f044;

    --bg-color: initial;
  }

  pre {
    code {
      @apply block px-2 py-1 text-base leading-tight;

      .line {
        @apply bg-[var(--bg-color)];

        &.diff {
          &.add {
            --bg-color: var(--color-line-add);
          }

          &.remove {
            --bg-color: var(--color-line-remove);
          }
        }

        &.highlighted {
          --bg-color: var(--color-line-highlight);
        }
      }
    }

    &.has-focused:not(:hover) {
      .line {
        @apply blur-[0.095rem] transition-all;

        &.focused {
          @apply blur-none;
        }
      }
    }

    &[data-show-line-numbers="true"] {
      --spacing: calc((var(--linecount) + 1) * 0.72rem);
      @apply pl-[var(--spacing)];

      code {
        @apply border-0 border-l-[1px] border-solid border-[#738a9466];

        counter-reset: step;
        counter-increment: step 0;

        .line {
          @apply relative;

          &::before {
            @apply absolute -left-[var(--spacing)] text-right text-sm content-[counter(step)];

            counter-increment: step;
          }
        }
      }
    }
  }
</style>
