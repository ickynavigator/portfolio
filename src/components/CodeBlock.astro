---
import {
  transformerNotationDiff,
  transformerNotationErrorLevel,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerRemoveNotationEscape,
} from "@shikijs/transformers";
import { Code as CustomCode } from "astro:components";

interface Props {
  code: string;
  language?: string;
  inline: boolean;
  title?: string | undefined;
  showLineNumbers?: boolean;
}

const { code, inline, title, showLineNumbers = false } = Astro.props;

const language = "ts";
---

<div class="rounded-md border-2 overflow-clip my-2 border-x-0">
  <div
    class="bg-secondary py-1 px-2 flex justify-between text-sm border-b-2 select-none"
  >
    <span class="font-semibold">{title ?? "Random Code"}</span>

    <span>
      {language}
    </span>
  </div>

  <CustomCode
    code={code}
    inline={inline}
    lang={language}
    data-show-line-numbers={showLineNumbers.toString()}
    style="--linecount: 2"
    tabindex={null}
    theme="dracula"
    transformers={[
      transformerNotationDiff(),
      transformerNotationHighlight(),
      transformerNotationWordHighlight(),
      transformerNotationFocus(),
      transformerNotationErrorLevel(),
      transformerRemoveNotationEscape(),
    ]}
  />
</div>

<style>
  :root {
    --color-line-add: #10b98124;
    --color-line-remove: #f43f5e24;
    --color-line-highlight: #8e96aa24;
    --color-line-warning: #eab30824;
    --color-line-error: #f43f5e24;

    --bg-color: initial;
  }

  pre {
    code {
      @apply block py-1 text-base leading-tight;

      .line {
        @apply box-border inline-block min-h-5 w-full bg-[var(--bg-color)] px-2 align-top;

        &.diff {
          &.add {
            --bg-color: var(--color-line-add);
          }

          &.remove {
            --bg-color: var(--color-line-remove);
          }
        }

        &.highlighted {
          --bg-color: var(--color-line-highlight);

          &.warning {
            --bg-color: var(--color-line-warning);
          }

          &.error {
            --bg-color: var(--color-line-error);
          }
        }

        .highlighted-word {
          @apply rounded border bg-[var(--color-line-highlight)] px-1 py-[0.0625rem];
        }
      }
    }

    &.has-focused {
      .line {
        @apply blur-none transition;
      }

      &:not(:hover) {
        .line {
          @apply blur-[0.095rem];

          &.focused {
            @apply blur-none;
          }
        }
      }
    }

    &[data-show-line-numbers="true"] {
      --spacing: calc((var(--linecount) + 1) * 0.72rem);

      @apply pl-[var(--spacing)];

      code {
        @apply border-0 border-l-[1px] border-solid border-[#738a9466];

        counter-reset: step;
        counter-increment: step 0;

        .line {
          @apply relative;

          &::before {
            @apply absolute -left-[100%] inline-block w-full bg-[var(--bg-color)] pr-[.4rem] text-right text-sm blur-none content-[counter(step)];

            counter-increment: step;
          }
        }
      }
    }
  }
</style>
