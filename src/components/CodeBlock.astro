---
import {
  transformerNotationDiff,
  transformerNotationErrorLevel,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerRemoveNotationEscape,
} from "@shikijs/transformers";
import {
  IconCaretUpDownFilled,
  IconFileCode,
  IconFileTypeJs,
  IconFileTypeJsx,
  IconFileTypeTs,
  IconFileTypeTsx,
  IconMinus,
  IconNumbers,
  IconX,
} from "@tabler/icons-react";
import { Code as CustomCode } from "astro:components";

import IconCheckbox from "~/components/IconCheckbox.astro";
import { cn } from "~/lib/utils";

interface Props {
  code: string;
  language?: string;
  inline: boolean;
  title?: string | undefined;
  showLineNumbers?: boolean;
}

const { code, inline, title, showLineNumbers = false } = Astro.props;

const language = "ts";

const fileButtons = [
  {
    title: "Close",
    icon: IconX,
    class:
      "bg-[#FF5F57] dark:[#FF5F57] hover:bg-[#E0483E] dark:hover:bg-[#E0483E]",
  },
  {
    title: "Minimize",
    icon: IconMinus,
    class:
      "bg-[#FFBD2E] dark:[#FFBD2E] hover:bg-[#E0A123] dark:hover:bg-[#E0A123]",
  },
  {
    title: "Expand",
    icon: IconCaretUpDownFilled,
    class:
      "bg-[#28C940] dark:[#28C940] hover:bg-[#22A532] dark:hover:bg-[#22A532] -rotate-45",
  },
];

const magicCodeIcon = (_language: string) => {
  switch (_language) {
    case "js": {
      return IconFileTypeJs;
    }
    case "jsx": {
      return IconFileTypeJsx;
    }
    case "ts":
    case "typescript": {
      return IconFileTypeTs;
    }
    case "tsx": {
      return IconFileTypeTsx;
    }
    default: {
      return IconFileCode;
    }
  }
};

const CodeIcon = magicCodeIcon(language);
---

<custom-code-block
  class="block rounded-t-md overflow-clip my-2"
  data-show-line-numbers={showLineNumbers}
>
  <div
    class="bg-[#F0F0F5] dark:bg-[#2E2E2E] text-[#2E2E2E] dark:text-[#E0E0E0] drop-shadow-md py-1 px-2 flex justify-between text-sm border-b-2 select-none"
  >
    <div class="flex gap-2 items-center group/icons">
      {
        fileButtons.map((button) => (
          <button
            title={button.title}
            class={cn(
              "rounded-full w-3 h-3 text-transparent group-hover/icons:text-white group-hover/icons:dark:text-black p-[0.0625rem] transition-colors items-center flex justify-center",
              button.class,
            )}
          >
            <span class="sr-only">{button.title}</span>
            <button.icon className="relative-icon" />
          </button>
        ))
      }
    </div>

    <span class="font-semibold">{title ?? "Random Code"}</span>

    <div class="flex gap-2 items-center">
      <IconCheckbox label="Show line numbers" id="show-numbers">
        <IconNumbers className="relative-icon" />
      </IconCheckbox>

      <CodeIcon className="relative-icon" />
    </div>
  </div>

  <CustomCode
    code={code}
    inline={inline}
    lang={language}
    style="--linecount: 2"
    tabindex={null}
    theme="dracula"
    transformers={[
      transformerNotationDiff(),
      transformerNotationHighlight(),
      transformerNotationWordHighlight(),
      transformerNotationFocus(),
      transformerNotationErrorLevel(),
      transformerRemoveNotationEscape(),
    ]}
  />
</custom-code-block>

<style>
  pre {
    --color-line-add: var(--success);
    --color-line-remove: var(--destructive);
    --color-line-highlight: var(--info);
    --color-line-warning: var(--warning-foreground);
    --color-line-error: var(--destructive);

    --alpha-offset: 0.2;

    --bg-color: initial;
    --spacing: calc(((var(--linecount) + 1) * 1rem));
    --left-position: calc(var(--spacing) + 5px);

    @apply transition-all;

    code {
      font-family: "Input Mono", "IBM Plex Mono", monospace;

      @apply block w-fit min-w-full text-base leading-tight;

      .line {
        @apply relative inline-block min-h-5 w-full border-l-4 border-transparent bg-[hsl(var(--bg-color)/var(--alpha-offset))] px-4 align-top;

        &::before,
        &::after {
          @apply text-muted-foreground;
        }

        &.diff {
          &.add {
            --bg-color: var(--color-line-add);
            --diff-content: "+";
          }

          &.remove {
            --bg-color: var(--color-line-remove);
            --diff-content: "-";
          }

          &::after {
            @apply absolute left-[calc(var(--spacing)-3rem)] w-[var(--spacing)] content-[var(--diff-content)];
          }
        }

        &.highlighted {
          --bg-color: var(--color-line-highlight);

          &.warning {
            --bg-color: var(--color-line-warning);
          }

          &.error {
            --bg-color: var(--color-line-error);
          }
        }

        .highlighted-word {
          @apply rounded border bg-[hsl(var(--color-line-highlight)/var(--alpha-offset))] px-1 py-[0.0625rem];
        }
      }
    }

    &.has-focused {
      .line {
        @apply blur-none transition duration-300;
      }

      &:not(:hover) {
        .line {
          @apply blur-[0.095rem];

          &.focused {
            @apply blur-none;
          }
        }
      }
    }
  }

  custom-code-block {
    &[data-show-line-numbers="true"] pre {
      @apply pl-[var(--spacing)];

      code {
        @apply border-0 border-l-[1px] border-solid border-primary-foreground;

        counter-reset: step;
        counter-increment: step 0;

        .line {
          &::before {
            @apply absolute -left-[var(--left-position)] w-[var(--spacing)] border-l-4 border-transparent bg-[hsl(var(--bg-color)/var(--alpha-offset))] pr-[.4rem] text-right text-sm blur-none content-[counter(step)];

            counter-increment: step;
          }
        }
      }
    }

    &[data-show-line-numbers="true"] pre {
      code .line.highlighted::before {
        @apply border-[hsl(var(--bg-color))];
      }
    }

    &:not([data-show-line-numbers="true"]) pre {
      code .line.highlighted {
        @apply border-[hsl(var(--bg-color))];
      }
    }
  }
</style>

<script>
  class CustomCodeBlock extends HTMLElement {
    // eslint-disable-next-line prettier/prettier
    connectedCallback() {
      this.querySelector("[title='Close']")?.addEventListener("click", () => {
        this.querySelector("pre")?.classList.add("hidden");
      });

      this.querySelector("[title='Expand']")?.addEventListener("click", () => {
        this.querySelector("pre")?.classList.remove("hidden");
      });

      const showNumbersBtn = this.querySelector("#show-numbers");
      if (booleanish(this.dataset.showLineNumbers) && showNumbersBtn) {
        if ("checked" in showNumbersBtn) {
          showNumbersBtn.checked = true;
        }
      }

      showNumbersBtn?.addEventListener("click", (e) => {
        if (e?.currentTarget == null) return;

        let _checked;

        if (
          "checked" in e.currentTarget &&
          typeof e.currentTarget.checked === "boolean"
        ) {
          _checked = e.currentTarget.checked;
        } else {
          _checked = !booleanish(this.dataset.showLineNumbers);
        }

        this.dataset.showLineNumbers = _checked.toString();
      });
    }
  }

  const booleanish = (value: unknown) => {
    if (typeof value === "boolean") return value;
    if (typeof value === "string")
      return value.trim() === "true" ? true : false;
    return false;
  };

  customElements.define("custom-code-block", CustomCodeBlock);
</script>
