---
import {
  IconAlertCircleFilled,
  IconAlertTriangleFilled,
  IconCircleCheckFilled,
  IconInfoSquareRoundedFilled,
} from "@tabler/icons-react";
import type { BlockProps } from "astro-portabletext/types";
import { cva } from "class-variance-authority";
import * as z from "zod";

import { cn } from "~/lib/utils";

const variantSchema = z
  .union([
    z.literal("default"),
    z.literal("info"),
    z.literal("success"),
    z.literal("warning"),
    z.literal("danger"),
  ])
  .catch("default");

const quoteVariants = cva(
  "border-(--bq-highlight) [&_.title]:text-(--bq-highlight) [&_svg]:text-(--bq-highlight)",
  {
    variants: {
      variant: {
        default: "[--bq-highlight:var(--tw-prose-quote-borders)]",
        info: "[--bq-highlight:var(--info)]",
        success: "[--bq-highlight:var(--success)]",
        warning: "[--bq-highlight:var(--warning)]",
        danger: "[--bq-highlight:var(--destructive)]",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const getVariantIcon = (variant: z.infer<typeof variantSchema>) => {
  switch (variant) {
    case "info":
      return IconInfoSquareRoundedFilled;
    case "success":
      return IconCircleCheckFilled;
    case "warning":
      return IconAlertCircleFilled;
    case "danger":
      return IconAlertTriangleFilled;
    default:
      return IconInfoSquareRoundedFilled;
  }
};

type Props = BlockProps;

const {
  node: { style },
} = Astro.props;

const _variant = style.replace(/blockquote-?/, "");
const variant = variantSchema.parse(_variant);

const VariantIcon = getVariantIcon(variant);

const bqClass = quoteVariants({ variant });
---

<blockquote class={cn(bqClass)}>
  {
    variant === "default" ? null : (
      <div class="flex items-center justify-between pe-4 not-italic">
        <span class="title font-extrabold capitalize">{variant}</span>

        <VariantIcon className="relative-icon text-lg" />
      </div>
    )
  }
  <p><slot /></p>
</blockquote>
