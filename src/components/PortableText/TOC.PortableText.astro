---
import {
  IconCaretRightFilled,
  IconPinned,
  IconPinnedOff,
} from "@tabler/icons-react";
import { toPlainText } from "astro-portabletext";

import type { BlockContent } from "~/t/sanity";
import IconCheckbox from "../IconCheckbox.astro";

interface Props {
  data: BlockContent;
}

const { data } = Astro.props;

const getHeadings = (_data: BlockContent) => {
  const filtered = _data
    .filter((item) => item._type === "block")
    .filter((item) => item.style?.startsWith("h"));

  return filtered.map((item) => {
    // @ts-expect-error we already filtered the items
    const text = toPlainText(item);

    return {
      text,
      level: item.style?.replace("h", ""),
      slug: text.replace(/\s/g, "-").toLocaleLowerCase(),
    };
  });
};

const headings = getHeadings(data);

if (headings.length === 0) {
  return null;
}
---

<toc-container class="group hidden md:inline" data-pin={true}>
  <div class="top-24 z-100 group-data-[pin='true']:sticky">
    <details
      class="w-fit rounded-md shadow-xs backdrop-blur-md before:rounded-md"
    >
      <summary class="flex items-center justify-between gap-6 px-4 py-2">
        <p class="inline-flex items-center gap-1 text-lg font-bold">
          <span>
            <IconCaretRightFilled
              className="relative-icon transition-transform in-[[open]]:rotate-90"
            />
          </span>
          Content
        </p>

        <div class="text-md flex items-center gap-2">
          <IconCheckbox label="pin/unpin" id="pin-toc">
            <span class="sr-only">Pin/Unpin TOC</span>
            <IconPinned slot="on" className="relative-icon" />
            <IconPinnedOff slot="off" className="relative-icon" />
          </IconCheckbox>
        </div>
      </summary>

      <div>
        <ul class="list-none px-4 py-2">
          {
            headings.map((heading) => (
              <li
                class="data-[level=1]:ms-2 data-[level=2]:ms-4 data-[level=3]:ms-6 data-[level=4]:ms-8 data-[level=5]:ms-10 data-[level=6]:ms-12"
                data-level={heading.level}
              >
                <a
                  href={`#${heading.slug}`}
                  class="hover-link text-muted-foreground data-[active='true']:text-foreground"
                  data-slug={heading.slug}
                  data-active={false}
                >
                  {heading.text}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </details>
  </div>
</toc-container>

<style>
  @reference "../../styles/globals.css";

  .details {
    @apply rounded-md [--border-color:hsl(var(--secondary-foreground))] [animation-timeline:scroll(root)] before:rounded-md;
  }
</style>

<script>
  class TOC extends HTMLElement {
    // eslint-disable-next-line prettier/prettier
    connectedCallback() {
      this.#bindCheck(this.querySelector("#pin-toc"), "pin");
    }

    #bindCheck(el: Element | HTMLElement | null, datasetKey: string) {
      if (el instanceof HTMLInputElement) {
        el.checked = booleanish(this.dataset[datasetKey]);

        el.addEventListener("click", (e) => {
          if (!(e.target instanceof HTMLInputElement)) return;
          this.dataset[datasetKey] = booleanish(e.target.checked).toString();
        });
      }
    }
  }

  const booleanish = (value: unknown) => {
    if (typeof value === "boolean") return value;
    if (typeof value === "string") return value.trim() === "true";
    return false;
  };

  customElements.define("toc-container", TOC);
</script>
