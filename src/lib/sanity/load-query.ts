import type {
  QueryParams,
  QueryWithoutParams,
  SanityQueries,
  UnfilteredResponseQueryOptions,
} from "@sanity/client";
import { sanityClient } from "sanity:client";

import { env } from "~/lib/env/client";

/**
 * Load a query from Sanity.
 *
 * We have to make our own wrapper function since the sanity client exported by Astro doesn't have access the `SanityQueries` interface generated by the type helper so it doesn't work the same way.
 */
export async function loadQuery<G extends string>(
  args: GetParams<G> & {
    query: G;
    options?: UnfilteredResponseQueryOptions;
  },
) {
  let _params: QueryWithoutParams | QueryParams = {};
  let _options: UnfilteredResponseQueryOptions = { filterResponse: false };

  if ("params" in args) {
    _params = args.params ?? {};
  }

  if ("options" in args) {
    _options = args.options;
  }

  if (env.PUBLIC_SANITY_VISUAL_EDITING_ENABLED) {
    if (env.SANITY_API_READ_TOKEN == undefined) {
      throw new Error(
        "The `SANITY_API_READ_TOKEN` environment variable is required during Visual Editing.",
      );
    }

    _options = {
      ..._options,
      filterResponse: false,
      perspective: "previewDrafts",
      resultSourceMap: "withKeyArraySelector",
      stega: true,
      useCdn: false,
      token: env.SANITY_API_READ_TOKEN,
    };
  }

  type Result = G extends keyof SanityQueries ? SanityQueries[G] : unknown;

  return sanityClient.fetch<Result, typeof _params, G>(
    args.query,
    _params,
    _options,
  );
}
