import type {
  QueryParams,
  QueryWithoutParams,
  SanityQueries,
  UnfilteredResponseQueryOptions,
} from "@sanity/client";
import { sanityClient } from "sanity:client";

/**
 * Load a query from Sanity.
 *
 * We have to make our own wrapper function since the sanity client exported by Astro doesn't have access the `SanityQueries` interface generated by the type helper so it doesn't work the same way.
 */
export async function loadQuery<G extends string>(
  args: GetParams<G> & {
    query: G;
  } & {
    options?: UnfilteredResponseQueryOptions;
  },
) {
  let _params: QueryWithoutParams | QueryParams = {};
  let _options: UnfilteredResponseQueryOptions = { filterResponse: false };

  if ("params" in args) {
    _params = args.params ?? {};
  }

  if ("options" in args) {
    _options = args.options;
  }

  type Result = G extends keyof SanityQueries ? SanityQueries[G] : unknown;

  return sanityClient.fetch<Result, typeof _params, G>(
    args.query,
    _params,
    _options,
  );
}
