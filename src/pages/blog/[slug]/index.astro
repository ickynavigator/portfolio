---
import {
  IconArrowLeft,
  IconCalendar,
  IconEdit,
  IconStopwatch,
} from "@tabler/icons-react";
import type { GetStaticPaths } from "astro";

import Container from "~/components/Container.astro";
import PortableText from "~/components/PortableText/PortableText.astro";
import SanityImage from "~/components/SanityImage.astro";
import ScrollProgress from "~/components/ScrollProgress.astro";
import MainLayout from "~/layouts/MainLayout.astro";
import NavLayout from "~/layouts/NavLayout.astro";
import dayjs, { getReadingTime } from "~/lib/date";
import { loadQuery } from "~/lib/sanity/load-query";
import { POST_QUERY, POST_SLUGS_QUERY } from "~/lib/sanity/queries";
import { urlForImage } from "~/lib/sanity/urlForImage";

export const getStaticPaths = (async () => {
  const { result } = await loadQuery({ query: POST_SLUGS_QUERY });

  return result.map((post) => ({
    params: { slug: post.slug },
  }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params;
const { result } = await loadQuery({ query: POST_QUERY, params: { slug } });
const image = result?.images?.[0];

if (!result || !image) {
  return Astro.redirect("/404");
}
---

<MainLayout
  title={result.title}
  description={result.description}
  image={urlForImage(image).url()}
  ogType="article"
  keywords={result.derefTag.map((tag) => tag.title)}
>
  <NavLayout>
    <ScrollProgress />
    <Container innerPage class="mb-4">
      <a href="/blog" class="hover-link">
        <IconArrowLeft className="relative-icon inline" />
        Back to Blogs</a
      >
    </Container>

    <div>
      <SanityImage
        node={image}
        class="md:rounded-md"
        transition:name={`blog-image-${result.slug.current}`}
        pictureProps={{
          class: "flex items-center justify-center",
        }}
      />
    </div>

    <Container as="article" innerPage>
      <div class="mt-4 flex flex-col gap-4">
        <h1
          class="relative text-5xl leading-none font-bold tracking-tight"
          transition:name={`blog-title-${result.slug.current}`}
        >
          {result.title}
        </h1>

        <div
          class="text-muted-foreground flex flex-col justify-between md:flex-row"
        >
          <div
            class="inline-flex flex-col gap-0 text-center md:flex-row md:gap-4"
          >
            <span
              class="inline-flex items-center gap-1"
              title={`Posted on ${dayjs(result.postedAt).format("LLLL")}`}
              transition:name={`blog-post-time-${result.slug.current}`}
            >
              <IconCalendar className="relative-icon inline" />
              <time datetime={result.postedAt}
                >{dayjs(result.postedAt).format("LL")}</time
              >
            </span>

            {
              result._updatedAt && (
                <span
                  class="inline-flex items-center gap-1"
                  title={`Last updated on ${dayjs(result._updatedAt).format("LLLL")}`}
                >
                  <IconEdit className="inline relative-icon" />

                  <time datetime={result._updatedAt}>
                    {dayjs(result._updatedAt).format("LL")}
                  </time>
                </span>
              )
            }
          </div>

          <span class="line-clamp-1 inline-flex items-center gap-1">
            <IconStopwatch className="relative-icon inline" />
            <span transition:name={`blog-read-time-${result.slug.current}`}
              >{getReadingTime(result.wordCount)}</span
            > read
          </span>
        </div>

        <ul
          class="max-w-full overflow-x-scroll whitespace-nowrap"
          transition:name={`blog-tags-${result.slug.current}`}
        >
          {
            result.derefTag.map((tag) => (
              <li class="inline">
                <a
                  href={`/search?type=post&tag=${encodeURIComponent(tag.slug.current)}`}
                  class="hover:bg-primary-foreground me-2 inline-block rounded-full border px-3 py-1.5 text-sm font-light transition-colors"
                >
                  {tag.title}
                </a>
              </li>
            ))
          }
        </ul>
        <p transition:name={`blog-description-${result.slug.current}`}>
          {result.description}
        </p>
      </div>

      <hr class="bg-muted my-5 h-1 rounded-sm border-0" />

      <PortableText data={result.body} showToc />
    </Container>
  </NavLayout>
</MainLayout>
