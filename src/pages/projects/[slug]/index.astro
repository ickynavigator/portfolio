---
import { IconArrowUpRight } from "@tabler/icons-react";
import type { GetStaticPaths } from "astro";

import Container from "~/components/Container.astro";
import PortableText from "~/components/PortableText/PortableText.astro";
import SanityImage from "~/components/SanityImage.astro";
import MainLayout from "~/layouts/MainLayout.astro";
import NavLayout from "~/layouts/NavLayout.astro";
import { loadQuery } from "~/lib/sanity/load-query";
import { PROJECT_QUERY, PROJECT_SLUGS_QUERY } from "~/lib/sanity/queries";
import { urlForImage } from "~/lib/sanity/urlForImage";

export const getStaticPaths = (async () => {
  const { result } = await loadQuery({ query: PROJECT_SLUGS_QUERY });

  return result.map((post) => ({
    params: { slug: post.slug },
  }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params;
const { result } = await loadQuery({ query: PROJECT_QUERY, params: { slug } });
const image = result?.images?.[0];

if (!result || !image) {
  return Astro.redirect("/404");
}
---

<MainLayout
  title={result.title}
  image={urlForImage(image).url()}
  ogType="article"
  keywords={result.derefTag.map((tag) => tag.title)}
>
  <NavLayout>
    <div>
      <SanityImage
        node={image}
        class="md:rounded-md"
        transition:name={`project-image-${result.slug.current}`}
        pictureProps={{
          class: "flex items-center justify-center",
        }}
      />
    </div>

    <Container as="article" innerPage>
      <div class="mt-4 flex flex-col gap-4">
        <div class="flex flex-col gap-2">
          <h1
            class="text-2xl leading-none font-light tracking-tight"
            transition:name={`project-title-${result.slug.current}`}
          >
            {result.title}
          </h1>
          <h2
            class="text-muted-foreground leading-none font-light tracking-tight"
          >
            Role: {result.role}
          </h2>
        </div>

        <ul
          class="max-w-full overflow-x-scroll whitespace-nowrap"
          transition:name={`project-tags-${result.slug.current}`}
        >
          {
            result.derefTag.map((tag) => (
              <li class="inline">
                <a
                  href={`/search?type=project&tag=${encodeURIComponent(tag.slug.current)}`}
                  class="hover:bg-primary-foreground me-2 inline-block rounded-full border px-3 py-1.5 text-sm font-light transition-colors"
                >
                  {tag.title}
                </a>
              </li>
            ))
          }
        </ul>
        <PortableText data={result.body} />
        <ul>
          {
            result.visibleLinks.map((link) => (
              <li class="inline">
                <a
                  href={link.url}
                  class="hover:bg-secondary inline-flex gap-2 rounded-lg border px-3 py-1 text-center transition-colors"
                >
                  <span class="text-xs">{link.display}</span>
                  <IconArrowUpRight className="inline relative-icon" />
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </Container>
  </NavLayout>
</MainLayout>
