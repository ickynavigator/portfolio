---
import { IconSearch } from "@tabler/icons-react";
import * as z from "zod";

import Button from "~/components/Button.astro";
import Container from "~/components/Container.astro";
import Input from "~/components/Input.astro";
import Loader from "~/components/Loader.astro";
import SearchContent from "~/components/SearchContent.astro";
import Select from "~/components/Select.astro";
import Tabs from "~/components/Tabs.astro";
import MainLayout from "~/layouts/MainLayout.astro";
import NavLayout from "~/layouts/NavLayout.astro";
import { loadQuery } from "~/lib/sanity/load-query";
import { TAGS_QUERY } from "~/lib/sanity/queries";

export const prerender = false;

const AVAILABLE_TYPES = ["post", "project"] as const;
const FULL_TYPES = ["all", ...AVAILABLE_TYPES] as const;

const parsed = z
  .object({
    search: z.string().trim().catch(""),
    type: z
      .string()
      .transform((type) => type.trim())
      .transform((type) => type.toLocaleLowerCase())
      .pipe(z.enum(FULL_TYPES).catch("all")),
    tag: z.string().optional(),
  })
  .catch({ search: "", type: "all", tag: undefined })
  .transform((data) => ({
    ...data,
    canSearch:
      data.search.length > 0 || data.type !== "all" || data.tag !== undefined,
  }))
  .parse(Object.fromEntries(Astro.url.searchParams.entries()));

const { result } = await loadQuery({ query: TAGS_QUERY });
---

<MainLayout>
  <NavLayout>
    <Container innerPage>
      <div class="mb-4">
        <h1 class="text-xl leading-none font-bold tracking-tight">Search</h1>
      </div>

      <form method="GET">
        <div
          class="flex flex-col items-center justify-center gap-2 md:flex-row md:items-stretch"
        >
          <Tabs
            name="type"
            options={[...FULL_TYPES]}
            defaultOption={parsed.type}
            class="inline-flex capitalize"
          />

          <Select name="tag" value={parsed.tag}>
            {
              [{ slug: "all", name: "All" }, ...result].map((tag) => (
                <option value={tag.slug} selected={tag.slug === parsed.tag}>
                  {tag.name}
                </option>
              ))
            }
          </Select>

          <div class="flex w-full flex-row gap-2">
            <div class="relative flex-1">
              <div
                class="pointer-events-none absolute inset-y-0 left-0 flex items-center ps-3"
              >
                <IconSearch className="relative-icon" />
              </div>
              <Input
                name="search"
                placeholder="Search By Selected Type..."
                class="ps-10"
                value={parsed.search}
                required
                minlength="1"
              />
            </div>

            <Button
              variant="secondary"
              type="submit"
              aria-label="Submit Search"
              title="Search"
            >
              <span class="sr-only">Submit Search</span>
              <IconSearch className="relative-icon md:hidden" />
              <span class="not-sm:hidden">Search</span>
            </Button>
          </div>
        </div>
      </form>

      {
        parsed.canSearch ? (
          <SearchContent
            server:defer
            search={parsed.search}
            type={parsed.type}
            tag={parsed.tag}
          >
            <Loader wrapperClass="pb-0" class="size-10" slot="fallback" />
          </SearchContent>
        ) : (
          <h3 class="py-8 text-center text-lg leading-none tracking-tight">
            Please add some search criteria
          </h3>
        )
      }
    </Container>
  </NavLayout>
</MainLayout>
