---
import { IconSearch } from "@tabler/icons-react";
import { z } from "zod";

import Button from "~/components/Button.astro";
import Container from "~/components/Container.astro";
import Input from "~/components/Input.astro";
import Tabs from "~/components/Tabs.astro";
import MainLayout from "~/layouts/MainLayout.astro";
import NavLayout from "~/layouts/NavLayout.astro";
import { loadQuery } from "~/lib/sanity/load-query";
import { SEARCH_QUERY } from "~/lib/sanity/queries";

export const prerender = false;

const schema = z.object({
  search: z.string().trim().catch(""),
  type: z.enum(["all", "post", "project"]).catch("all"),
});

const getTransformedType = (type: string) => {
  const ALL_TYPES = ["post", "project"];

  switch (type) {
    case "all":
      return ALL_TYPES;
    case "post":
    case "project":
      return [type];
    default:
      return ALL_TYPES;
  }
};

let defaultType = Astro.url.searchParams.get("type") ?? "all";
let defaultSearch = Astro.url.searchParams.get("tag") ?? "";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const result = schema.parse(Object.fromEntries(data.entries()));

    defaultType = result.type;
    defaultSearch = result.search;
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const { result } =
  defaultSearch.length > 0
    ? await loadQuery({
        query: SEARCH_QUERY,
        params: {
          title: `*${defaultSearch}*`,
          type: getTransformedType(defaultType),
        },
      })
    : { result: null };
---

<MainLayout>
  <NavLayout>
    <Container innerPage>
      <div class="mb-4">
        <h1 class="text-xl leading-none font-bold tracking-tight">Search</h1>
      </div>

      <form method="POST">
        <div
          class="flex flex-col items-center justify-center gap-2 md:flex-row md:items-stretch"
        >
          <Tabs
            name="type"
            options={["All", "Post", "Project"]}
            defaultOption={defaultType}
            class="inline-flex"
          />

          <div class="flex w-full flex-row gap-2">
            <div class="relative flex-1">
              <div
                class="pointer-events-none absolute inset-y-0 left-0 flex items-center ps-3"
              >
                <IconSearch className="relative-icon" />
              </div>
              <Input
                name="search"
                placeholder="Search By Selected Type..."
                class="ps-10"
                value={defaultSearch}
                required
                minlength="1"
              />
            </div>

            <Button
              variant="secondary"
              type="submit"
              size="icon"
              class="border md:hidden"
              aria-label="Submit Search"
              title="Search"
            >
              <span class="sr-only">Submit Search</span>
              <IconSearch className="relative-icon" />
            </Button>

            <Button
              variant="secondary"
              type="submit"
              class="hidden border md:flex"
              aria-label="Submit Search"
              title="Search"
            >
              Search
            </Button>
          </div>
        </div>
      </form>

      <ul class="mt-8 flex flex-col gap-4">
        {
          result
            ?.filter(
              (item) => item._type === "post" || item._type === "project",
            )
            .map((item) => {
              const slug = item.slug.current;

              let url;

              switch (item._type) {
                case "post":
                  url = `/blog/${slug}`;
                  break;
                case "project":
                  url = `/projects/${slug}`;
                  break;
                default:
                  url = "";
              }

              return (
                <a href={url}>
                  <li class="hover:bg-secondary flex flex-col gap-1 rounded-md border p-4 transition">
                    <p class="text-muted-foreground capitalize">{item._type}</p>

                    <h2 class="text-lg leading-none tracking-tight">
                      {item.title}
                    </h2>

                    {item.tags.length > 0 && (
                      <ul
                        class="scrollbar-thin max-w-full overflow-x-scroll whitespace-nowrap"
                        transition:name={`project-tags-${slug}`}
                      >
                        {item.tags.map((tag) => (
                          <li class="me-2 inline-block rounded-full border px-2 py-0.5 text-xs font-light">
                            {tag.title}
                          </li>
                        ))}
                      </ul>
                    )}
                  </li>
                </a>
              );
            })
        }
      </ul>
    </Container>
  </NavLayout>
</MainLayout>
